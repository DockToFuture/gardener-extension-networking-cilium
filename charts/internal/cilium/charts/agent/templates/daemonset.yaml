apiVersion: {{ include "daemonsetversion" . }}
kind: DaemonSet
metadata:
  name: cilium
  namespace: {{ .Release.Namespace }}
  labels:
    gardener.cloud/role: system-component
    k8s-app: cilium
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  template:
    metadata:
      annotations:
        checksum/configmap-cilium: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum | quote }}
{{- if and .Values.global.prometheus.enabled (not .Values.global.prometheus.serviceMonitor.enabled) }}
        prometheus.io/port: "{{ .Values.global.prometheus.port }}"
        prometheus.io/scrape: "true"
{{- end }}
        # This annotation plus the CriticalAddonsOnly toleration makes
        # cilium to be a critical pod in the cluster, which ensures cilium
        # gets priority scheduling.
        # https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        k8s-app: cilium
    spec:
{{- if .Values.global.affinity }}
      affinity:
{{ toYaml .Values.global.affinity | indent 8 }}
{{- end }}
      containers:
{{- if .Values.global.sleepAfterInit }}
      - command: [ "/bin/bash", "-c", "--" ]
        args: [ "while true; do sleep 30; done;" ]
        livenessProbe:
          exec:
            command:
            - "true"
        readinessProbe:
          exec:
            command:
            - "true"
{{- else }}
      - args:
        - --config-dir=/tmp/cilium/config-map
        command:
        - cilium-agent
{{- if semverCompare ">= 1.20" .Capabilities.KubeVersion.GitVersion }}
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: {{ .Values.global.agent.healthPort }}
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
{{- end }}
        livenessProbe:
{{- if .Values.keepDeprecatedProbes }}
          exec:
            command:
            - cilium
            - status
            - --brief
{{- else }}
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: {{ .Values.global.agent.healthPort }}
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
{{- end }}
          failureThreshold: 10
{{- if semverCompare "< 1.20" .Capabilities.KubeVersion.GitVersion }}
          # The initial delay for the liveness probe is intentionally large to
          # avoid an endless kill & restart cycle if in the event that the initial
          # bootstrapping takes longer than expected.
          # Starting from Kubernetes 1.20, we are using startupProbe instead
          # of this field.
          initialDelaySeconds: 120
{{- end }}
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
{{- if .Values.keepDeprecatedProbes }}
          exec:
            command:
            - cilium
            - status
            - --brief
{{- else }}
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: {{ .Values.global.agent.healthPort }}
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
{{- end }}
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
{{- end }}
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: CILIUM_CNI_CHAINING_MODE
          valueFrom:
            configMapKeyRef:
              key: cni-chaining-mode
              name: cilium-config
              optional: true
        - name: CILIUM_CUSTOM_CNI_CONF
          valueFrom:
            configMapKeyRef:
              key: custom-cni-conf
              name: cilium-config
              optional: true
        image: {{ index .Values.global.images "cilium-agent" }}
        imagePullPolicy: {{ .Values.global.pullPolicy }}
{{- if .Values.global.cni.install }}
        lifecycle:
          postStart:
            exec:
              command:
              - "/cni-install.sh"
              -{{- if .Values.global.debug.enabled }} "--enable-debug=true"{{- else }} "--enable-debug=false"{{- end }}
              - "--cni-exclusive=true"
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
{{- end }}
        resources:
          {{- toYaml .Values.resources | trim | nindent 10 }}
        name: cilium-agent
{{- if .Values.global.prometheus.enabled }}
        ports:
        - containerPort: {{ .Values.global.prometheus.port }}
          hostPort: {{ .Values.global.prometheus.port }}
          name: prometheus
          protocol: TCP
{{- end }}
{{- if .Values.global.hubble.metrics.enabled }}
        - containerPort: {{ .Values.global.hubble.metrics.port }}
          hostPort: {{ .Values.global.hubble.metrics.port }}
          name: hubble-metrics
          protocol: TCP
{{- end }}
        securityContext:
          privileged: true
        volumeMounts:
{{- /* CRI-O already mounts the BPF filesystem */ -}}
{{- if not (eq .Values.global.containerRuntime.integration "crio") }}
        - name: bpf-maps
          mountPath: /sys/fs/bpf
{{- end }}
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: cni-path
          mountPath: /host/opt/cni/bin
        - name: etc-cni-netd
          mountPath: {{ .Values.global.cni.hostConfDirMountPath }}
{{- if .Values.global.etcd.enabled }}
        - name: etcd-config-path
          mountPath: /var/lib/etcd-config
          readOnly: true
{{- if or .Values.global.etcd.ssl .Values.global.etcd.managed }}
        - name: etcd-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
{{- end }}
{{- end }}
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
{{- if and .Values.global.ipMasqAgent .Values.global.ipMasqAgent.enabled }}
        - name: ip-masq-agent
          mountPath: /etc/config
          readOnly: true
{{- end }}
{{- if .Values.global.cni.configMap }}
        - name: cni-configuration
          mountPath: {{ .Values.global.cni.confFileMountPath }}
          readOnly: true
{{- end }}
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
{{- if .Values.global.encryption.enabled }}
        - name: cilium-ipsec-secrets
          mountPath: {{ .Values.global.encryption.mountPath }}
{{- end }}
{{- if .Values.global.kubeConfigPath }}
        - name: kube-config
          mountPath: {{ .Values.global.kubeConfigPath }}
          readOnly: true
{{- end}}
{{- if .Values.monitor.enabled }}
      - name: cilium-monitor
        command: ["cilium"]
        args:
        - monitor
{{- range $type := .Values.monitor.eventTypes }}
        - --type={{ $type }}
{{- end }}
        image: "{{ index .Values.global.images "cilium-agent" }}"
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        volumeMounts:
        - mountPath: /var/run/cilium
          name: cilium-run
        resources:
          {{- toYaml .Values.monitor.resources | trim | nindent 10 }}
{{- end }}
{{- if .Values.global.etcd.managed }}
      # In managed etcd mode, Cilium must be able to resolve the DNS name of
      # the etcd service
      dnsPolicy: ClusterFirstWithHostNet
{{- end }}
      hostNetwork: true
      initContainers:
      # Disable source validation / rp_filter.
      - name: disable-rp-filter
        image: {{ index .Values.global.images "cilium-agent" }}
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - "echo 'net.ipv4.conf.all.rp_filter=0' > /host/etc/sysctl.d/99-cilium-rp-filter.conf"
        volumeMounts:
        - name: host-etc
          mountPath: /host/etc
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        env:
          - name: CGROUP_ROOT
            value: /run/cilium/cgroupv2
          - name: BIN_PATH
            value: /opt/cni/bin
        command:
          - sh
          - -ec
          # The statically linked Go program binary is invoked to avoid any
          # dependency on utilities like sh and mount that can be missing on certain
          # distros installed on the underlying host. Copy the binary to the
          # same directory where we install cilium cni plugin so that exec permissions
          # are available.
          - |
            cp /usr/bin/cilium-mount /hostbin/cilium-mount;
            nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
            rm /hostbin/cilium-mount
        image: {{ index .Values.global.images "cilium-agent" }}
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: hostproc
            mountPath: /hostproc
          - name: cni-path
            mountPath: /hostbin
        securityContext:
          privileged: true
{{- if and .Values.global.nodeinit.enabled (not (eq .Values.global.nodeinit.bootstrapFile "")) }}
      - name: wait-for-node-init
        command: ['sh', '-c', 'until stat {{ .Values.global.nodeinit.bootstrapFile }} > /dev/null 2>&1; do echo "Waiting on node-init to run..."; sleep 1; done']
        image:  "{{ index .Values.global.images "cilium-agent" }}"
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        volumeMounts:
        - mountPath: {{ .Values.global.nodeinit.bootstrapFile }}
          name: cilium-bootstrap-file
{{- end }}
      - command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        image: {{ index .Values.global.images "cilium-agent" }}
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        name: clean-cilium-state
        securityContext:
          privileged: true
        volumeMounts:
{{- /* CRI-O already mounts the BPF filesystem */ -}}
{{- if not (eq .Values.global.containerRuntime.integration "crio") }}
        - name: bpf-maps
          mountPath: /sys/fs/bpf
{{- end }}
        # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          {{- toYaml .Values.initResources | trim | nindent 10 }}
{{- if eq .Values.global.kubeProxyReplacement "strict" }}
      # Clean up kube-proxy iptable rules in case cilium is running as kube-proxy replacement
{{- if not (eq .Values.kubeProxyCleanup "kube-proxy") }}
      - command:
        - bash
        - -c
        # Recommended way to clean up according to cilium docs (https://docs.cilium.io/en/latest/gettingstarted/kubeproxy-free/)
        #- "iptables-restore <(iptables-save | grep -v KUBE)"
        # Unfortunately, the above is not directly working due to etc/alternatives issue with cilium container image
        # Therefore, we use the equivalent below, which adds also log output
        - "iptables-save | grep -v KUBE > /saved-iptables-without-KUBE; echo 'IPTables without KUBE:'; cat /saved-iptables-without-KUBE; echo 'iptables-restore:'; iptables-restore --verbose /saved-iptables-without-KUBE"
        image: {{ index .Values.global.images "cilium-agent" }}
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        name: cilium-kube-proxy-clean-up
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
          privileged: true
{{- else }}
      - command:
        {{- if semverCompare "< 1.17" .Capabilities.KubeVersion.GitVersion }}
        - /hyperkube
        - kube-proxy
        {{- else }}
        - /usr/local/bin/kube-proxy
        {{- end }}
        - --cleanup
        - --v=2
        image: {{ index .Values.global.images "kube-proxy" }}
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        name: kube-proxy-clean-up
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
          privileged: true
{{- end }}
{{- end }}
      restartPolicy: Always
{{- if and (eq .Release.Namespace "kube-system") (or (gt .Capabilities.KubeVersion.Minor "10") (gt .Capabilities.KubeVersion.Major "1"))}}
      priorityClassName: system-node-critical
{{- end }}
      serviceAccount: cilium
      serviceAccountName: cilium
      terminationGracePeriodSeconds: 1
      tolerations:
      - operator: Exists
      volumes:
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: {{ .Values.global.daemon.runPath }}
          type: DirectoryOrCreate
{{- /* CRI-O already mounts the BPF filesystem */ -}}
{{- if not (eq .Values.global.containerRuntime.integration "crio") }}
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
{{- end }}
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  {{ .Values.global.cni.binPath }}
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: {{ .Values.global.cni.confPath }}
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
{{- if .Values.global.kubeConfigPath }}
      - name: kube-config
        hostPath:
          path: {{ .Values.global.kubeConfigPath }}
          type: FileOrCreate
{{- end }}
{{- if and .Values.global.nodeinit.enabled (not (eq .Values.global.nodeinit.bootstrapFile "")) }}
      - name: cilium-bootstrap-file
        hostPath:
          path: {{ .Values.global.nodeinit.bootstrapFile }}
          type: FileOrCreate
{{- end }}
      # To mount /etc directory
      - name: host-etc
        hostPath:
          path: /etc
          type: Directory
{{- if .Values.global.etcd.enabled }}
        # To read the etcd config stored in config maps
      - configMap:
          defaultMode: 420
          items:
          - key: etcd-config
            path: etcd.config
          name: cilium-config
        name: etcd-config-path
        # To read the k8s etcd secrets in case the user might want to use TLS
{{- if or .Values.global.etcd.ssl .Values.global.etcd.managed }}
      - name: etcd-secrets
        secret:
          defaultMode: 420
          optional: true
          secretName: cilium-etcd-secrets
{{- end }}
{{- end }}
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        secret:
          secretName: cilium-clustermesh
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          optional: true
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
                - key: ca.crt
                  path: client-ca.crt
                - key: tls.crt
                  path: server.crt
                - key: tls.key
                  path: server.key
{{- if and .Values.global.ipMasqAgent .Values.global.ipMasqAgent.enabled }}
      - configMap:
          name: ip-masq-agent
          optional: true
          items:
            - key: config
              path: ip-masq-agent
        name: ip-masq-agent
{{- end }}
{{- if .Values.global.encryption.enabled }}
      - name: cilium-ipsec-secrets
        secret:
          secretName: {{ .Values.global.encryption.secretName }}
{{- end }}
{{- if .Values.global.cni.configMap }}
      - name: cni-configuration
        configMap:
          name: {{ .Values.global.cni.configMap }}
{{- end }}
  updateStrategy:
    rollingUpdate:
      maxUnavailable: {{ .Values.maxUnavailable }}
    type: RollingUpdate
